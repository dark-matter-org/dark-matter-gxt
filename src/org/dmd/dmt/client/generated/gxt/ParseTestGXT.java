package org.dmd.dmt.client.generated.gxt;

// Generated from: org.dmd.util.codegen.ImportManager.getFormattedImports(ImportManager.java:82)
// Called from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:442)
import java.util.Iterator;                                               // Multi-valued attribute access - (BaseDMWGenerator.java:1727)
import org.dmd.dmc.*;                                                    // If any attributes - (BaseDMWGenerator.java:1087)
import org.dmd.dms.generated.dmo.MetaDMSAG;                              // Required for MODREC constructor - (BaseDMWGenerator.java:1072)
import org.dmd.dms.generated.enums.ValueTypeEnum;                        // To allow overload of GxtWrapper.set() - (GxtDMWGenerator.java:122)
import org.dmd.dms.generated.types.DmcTypeModifierMV;                    // Required for MODREC constructor - (BaseDMWGenerator.java:1071)
import org.dmd.dmt.shared.generated.dmo.ObjWithRefsDMO;                  // DMO reference - (BaseDMWGenerator.java:1142)
import org.dmd.dmt.shared.generated.dmo.ParseTestDMO;                    // Class not auxiliary or abstract - (BaseDMWGenerator.java:1252)
import org.dmd.dmt.shared.generated.dmo.TestBasicObjectFixedDMO;         // DMO reference - (BaseDMWGenerator.java:1142)
import org.dmd.dmt.shared.generated.types.ObjWithRefsREF;                // Helper class - (BaseDMWGenerator.java:1145)
import org.dmd.mvw.client.gxt.dmw.GxtWrapper;                            // Unnamed object wrapper - (BaseDMWGenerator.java:1235)



/**
 * Used to test the DmcUncheckedOIFParser in the creation of
 * DmcUncheckedObjects within DmcUncheckedObjects.
 * <P>
 * Generated from the dmt schema at version unknown
 * <P>
 * This code was auto-generated by the dmggenerator utility and shouldn't be alterred manually!
 * Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:479)
 */
public class ParseTestGXT extends GxtWrapper {


    static final int svBooleanID = 10000;
    static final int svUnnamedObjID = 10341;

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:570)
    public ParseTestGXT() {
        super(new ParseTestDMO());
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:575)
    public ParseTestGXT(DmcTypeModifierMV mods) {
        super(new ParseTestDMO(mods));
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:593)
    public ParseTestGXT getModificationRecorder(){
        ParseTestGXT rc = new ParseTestGXT(new DmcTypeModifierMV(MetaDMSAG.__modify));
        return(rc);
    }

    public ParseTestDMO getDMO() {
        return((ParseTestDMO) core);
    }

    // Generated from: org.dmd.dmg.generators.BaseDMWGenerator.dumpWrapper(BaseDMWGenerator.java:655)
    public ParseTestGXT(ParseTestDMO obj) {
        super(obj);
    }

    /**
     * @return The number of ObjWithRefs items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getMvIdxNamedObjSize(){
        return(((ParseTestDMO) core).getMvIdxNamedObjSize());
    }

    /**
     * @return true if there are no ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getMvIdxNamedObjIsEmpty(){
        if (((ParseTestDMO) core).getMvIdxNamedObjSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any ObjWithRefsDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getMvIdxNamedObjHasValue(){
        if (((ParseTestDMO) core).getMvIdxNamedObjSize() == 0)
            return(false);
        return(true);
    }

    /**
     * Sets the mvIdxNamedObj value at the specified index.
     * @param value A value compatible with ObjWithRefs
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1956)
    public DmcAttribute<?> setNthMvIdxNamedObj(int index, ObjWithRefsDMO value){
        return(((ParseTestDMO) core).setNthMvIdxNamedObj(index, value));
    }

    /**
     * @return The reference to the ObjWithRefs object at the specified index.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2088)
    public ObjWithRefsREF getNthMvIdxNamedObjREF(int index){
        return(((ParseTestDMO) core).getNthMvIdxNamedObjREF(index));
    }

    /**
     * Removes the mvIdxNamedObj attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remMvIdxNamedObj(){
        ((ParseTestDMO) core).remMvIdxNamedObj();
    }

    /**
     * @return The number of TestBasicObjectFixed items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getMvIdxUnnamedObjSize(){
        return(((ParseTestDMO) core).getMvIdxUnnamedObjSize());
    }

    /**
     * @return true if there are no TestBasicObjectFixedDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getMvIdxUnnamedObjIsEmpty(){
        if (((ParseTestDMO) core).getMvIdxUnnamedObjSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any TestBasicObjectFixedDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getMvIdxUnnamedObjHasValue(){
        if (((ParseTestDMO) core).getMvIdxUnnamedObjSize() == 0)
            return(false);
        return(true);
    }

    /**
     * Sets the mvIdxUnnamedObj value at the specified index.
     * @param value A value compatible with TestBasicObjectFixed
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1956)
    public DmcAttribute<?> setNthMvIdxUnnamedObj(int index, TestBasicObjectFixedDMO value){
        return(((ParseTestDMO) core).setNthMvIdxUnnamedObj(index, value));
    }

    /**
     * @return The TestBasicObjectFixedDMW object at the specified index.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1988)
    public TestBasicObjectFixedDMO getNthMvIdxUnnamedObj(int index){
        return(((ParseTestDMO) core).getNthMvIdxUnnamedObj(index));
    }

    /**
     * Removes the mvIdxUnnamedObj attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remMvIdxUnnamedObj(){
        ((ParseTestDMO) core).remMvIdxUnnamedObj();
    }

    /**
     * @return The number of TestBasicObjectFixed items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1671)
    public int getMvUnnamedObjSize(){
        return(((ParseTestDMO) core).getMvUnnamedObjSize());
    }

    /**
     * @return true if there are no TestBasicObjectFixedDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1679)
    public boolean getMvUnnamedObjIsEmpty(){
        if (((ParseTestDMO) core).getMvUnnamedObjSize() == 0)
            return(true);
        return(false);
    }

    /**
     * @return true if there are any TestBasicObjectFixedDMO items.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1689)
    public boolean getMvUnnamedObjHasValue(){
        if (((ParseTestDMO) core).getMvUnnamedObjSize() == 0)
            return(false);
        return(true);
    }

    /**
     * @return An Iterator of TestBasicObjectFixedDMO objects.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1732)
    public Iterator<TestBasicObjectFixedDMO> getMvUnnamedObj(){
        return(((ParseTestDMO) core).getMvUnnamedObj());
    }

    /**
     * Adds another mvUnnamedObj value.
     * @param value A value compatible with TestBasicObjectFixedDMO
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1797)
    public DmcAttribute<?> addMvUnnamedObj(TestBasicObjectFixedDMO value){
        return(((ParseTestDMO) core).addMvUnnamedObj(value));
    }

    /**
     * Deletes a mvUnnamedObj value.
     * @param value The TestBasicObjectFixed to be deleted from set of attribute values.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:1845)
    public void delMvUnnamedObj(TestBasicObjectFixedDMO value){
        ((ParseTestDMO) core).delMvUnnamedObj(value);
    }

    /**
     * Removes the mvUnnamedObj attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatMV(BaseDMWGenerator.java:2292)
    public void remMvUnnamedObj(){
        ((ParseTestDMO) core).remMvUnnamedObj();
    }

    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1474)
    public Boolean isSvBoolean(){
        return(((ParseTestDMO) core).isSvBoolean());
    }

    /**
     * Sets svBoolean to the specified value.
     * @param value A value compatible with DmcTypeBoolean
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1584)
    public void setSvBoolean(Object value) throws DmcValueException {
        ((ParseTestDMO) core).setSvBoolean(value);
    }

    /**
     * Sets svBoolean to the specified value.
     * @param value Boolean
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1593)
    public void setSvBoolean(Boolean value){
        ((ParseTestDMO) core).setSvBoolean(value);
    }

    /**
     * Removes the svBoolean attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remSvBoolean(){
        ((ParseTestDMO) core).remSvBoolean();
    }

    /**
     * @return A TestBasicObjectFixedGXT object.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1401)
    public TestBasicObjectFixedGXT getSvUnnamedObj(){
        TestBasicObjectFixedDMO dmo = ((ParseTestDMO) core).getSvUnnamedObj();
        if (dmo == null)
            return(null);
        
        return((TestBasicObjectFixedGXT)dmo.getContainer());
    }

    /**
     * Sets the svUnnamedObj to the specified value.
     * @param value A value compatible with TestBasicObjectFixedDMO
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1550)
    public void setSvUnnamedObj(TestBasicObjectFixedDMO value) {
        ((ParseTestDMO) core).setSvUnnamedObj(value);
    }

    /**
     * Sets the svUnnamedObj to the specified value.
     * @param value A value compatible with TestBasicObjectFixed
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1560)
    public void setSvUnnamedObj(Object value) throws DmcValueException {
        ((ParseTestDMO) core).setSvUnnamedObj(value);
    }

    /**
     * Removes the svUnnamedObj attribute value.
     */
    // org.dmd.dmg.generators.BaseDMWGenerator.formatSV(BaseDMWGenerator.java:1619)
    public void remSvUnnamedObj(){
        ((ParseTestDMO) core).remSvUnnamedObj();
    }


}
